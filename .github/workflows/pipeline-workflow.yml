name: CI/CD Pipeline

on:
  push:
    branches: [master, dev]
env:
  tf_version: "0.12.26"

jobs:
  build_and_deploy:
    name: Build and deploy Webapp to S3
    runs-on: ubuntu-latest
    steps:
      - name: Setup DEV Environment Variables
        if: github.ref == 'refs/heads/dev'
        run: |
          echo "aws_key=${{ secrets.ces_identity_dev_key }}" >> $GITHUB_ENV
          echo "aws_secret=${{ secrets.ces_identity_dev_secret }}" >> $GITHUB_ENV
          echo "tf_working_dir=./terraform-iac/dev/app" >> $GITHUB_ENV
          echo "std_change_key=${{ secrets.standard_change_sandbox_client_key }}" >> $GITHUB_ENV
          echo "std_change_secret=${{ secrets.standard_change_sandbox_client_secret }}" >> $GITHUB_ENV
          echo "rfc_template_id=Codepipeline-Standard-Change" >> $GITHUB_ENV
          echo "slack_channel=C0AGQEZMF" >> $GITHUB_ENV #slack-bot-testing

      - name: Setup PRD Environment Variables
        if: github.ref == 'refs/heads/master'
        run: |
          echo "aws_key=${{ secrets.ces_identity_prd_key }}" >> $GITHUB_ENV
          echo "aws_secret=${{ secrets.ces_identity_prd_secret }}" >> $GITHUB_ENV
          echo "tf_working_dir=./terraform-iac/prd/app" >> $GITHUB_ENV
          echo "std_change_key=${{ secrets.standard_change_production_client_key }}" >> $GITHUB_ENV
          echo "std_change_secret=${{ secrets.standard_change_production_client_secret }}" >> $GITHUB_ENV
          echo "rfc_template_id=Codepipeline-Standard-Change" >> $GITHUB_ENV
          echo "slack_channel=C0AGQEZMF" >> $GITHUB_ENV #slack-bot-testing

      - name: Check out
        uses: actions/checkout@v2

      - name: Disallow Concurrent Runs
        uses: byu-oit/github-action-disallow-concurrent-runs@v1
        with:
          token: ${{ github.token }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.aws_key }}
          aws-secret-access-key: ${{ env.aws_secret }}
          aws-region: us-west-2

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.tf_version }}

      - name: Terraform Init
        working-directory: ${{ env.tf_working_dir }}
        run: terraform init

      - name: Terraform Format
        working-directory: ${{ env.tf_working_dir }}
        run: terraform fmt -check

      - name: Terraform Plan
        working-directory: ${{ env.tf_working_dir }}
        id: plan
        run: terraform plan -input=false -out=plan

      # TODO Uncomment before release
      #      - name: Start Standard Change
      #        uses: byu-oit/github-action-start-standard-change@v1
      #        id: start-standard-change
      #        with:
      #          client-key: ${{ env.std_change_key }}
      #          client-secret: ${{ env.std_change_secret }}
      #          template-id: ${{ env.template_id }}

      - name: Terraform Apply
        working-directory: ${{ env.tf_working_dir }}
        run: terraform apply plan

      - name: Get Bucket name
        id: s3_tf_outputs
        working-directory: ${{ env.tf_working_dir }}
        run: terraform output s3_bucket

      - name: Copy src to S3 site bucket
        run: aws s3 sync src s3://${{ steps.s3_tf_outputs.outputs.stdout }}

      - name: Get CloudFront distribution ID
        id: cf_tf_outputs
        working-directory: ${{ env.tf_working_dir }}
        run: terraform output cf_distribution_id

      - name: Invalidate CloudFront cache
        run: aws cloudfront create-invalidation --path '/*' --distribution-id ${{ steps.cf_tf_outputs.outputs.stdout }}

      # TODO Uncomment before release
      #      - name: End Standard Change
      #        uses: byu-oit/github-action-end-standard-change@v1
      #        if: ${{ always() && steps.start-standard-change.outcome == 'success' }} # Run if RFC started, even if the deploy failed
      #        with:
      #          client-key: ${{ env.std_change_key }}
      #          client-secret: ${{ env.std_change_secret }}
      #          change-sys-id: ${{ steps.start-standard-change.outputs.change-sys-id }}
      #          work-start: ${{ steps.start-standard-change.outputs.work-start }}
      #          success: ${{ steps.deploy.outcome == 'success' }}

      - name: Slack
        uses: 8398a7/action-slack@v3
        if: always() # Pick up events even if the job fails or is canceled.
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow # selectable (default: repo,message)
          channel: ${{ env.slack_channel }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.slack_webhook_url }} # required
